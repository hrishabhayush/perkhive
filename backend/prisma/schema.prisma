// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  username     String   @unique
  points       Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  responses    Response[]
  ratings      Rating[]
  leaderboard  Leaderboard?
}

model Company {
  id         String    @id @default(uuid())
  name       String    @unique
  email      String    @unique
  campaigns  Campaign[]
  rewards    Reward[]
  createdAt  DateTime  @default(now())
}

model Campaign {
  id           String     @id @default(uuid())
  companyId    String
  title        String
  description  String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  questions    Question[]
  responses    Response[]
  ratings      Rating[]
  
  company      Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Question {
  id         String   @id @default(uuid())
  campaignId String
  text       String
  type       QuestionType
  createdAt  DateTime @default(now())

  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  responses  Response[]
}

enum QuestionType {
  DEMOGRAPHIC
  ACTION_SPECIFIC
}

model Response {
  id         String   @id @default(uuid())
  userId     String
  questionId String
  answer     String
  campaignId String
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model Reward {
  id          String   @id @default(uuid())
  companyId   String
  title       String
  description String
  pointsCost  Int
  createdAt   DateTime @default(now())

  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Rating {
  id          String   @id @default(uuid())
  campaignId  String
  userId      String
  score       Int      @default(0)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses   Response[]
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model Leaderboard {
  id         String   @id @default(uuid())
  userId     String
  points     Int
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}